name: ci-cd.yml

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Setup MongoDB
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: '6.0'

      - name: Build and Test
        run: |
          mvn -B clean verify -Pprod
          echo "Verificando o JAR gerado:"
          ls -la target/*.jar

      - name: Copy files to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Criar diretório de deploy
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USERNAME}@${HOST} 'mkdir -p ~/app'
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USERNAME}@${HOST} 'mkdir -p ~/app/target'
          
          # Garantir que o diretório target existe e que o JAR foi gerado
          ls -la target/

          # Copiar arquivos necessários
          scp -o StrictHostKeyChecking=no -i private_key.pem \
            Dockerfile \
            docker-compose.yml \
            target/*.jar \
            ${USERNAME}@${HOST}:~/app/

          # Executar Docker na EC2
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USERNAME}@${HOST} '
            cd ~/app && \
            docker-compose down || true && \
            docker system prune -f && \
            docker-compose up -d --build
          '

          rm -f private_key.pem

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            rodrigoamora/rodrigo-springboot:latest
            rodrigoamora/rodrigo-springboot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Criar diretório se não existir
            mkdir -p ~/app
            
            # Copiar docker-compose
            cp ~/app/docker-compose.yml ~/app/docker-compose.yml.backup || true
            
            # Download do docker-compose mais recente
            curl -o ~/app/docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            
            # Parar containers existentes
            cd ~/app
            docker-compose down || true
            
            # Remover imagens antigas
            docker system prune -f
            
            # Pull da nova imagem
            docker-compose pull
            
            # Subir aplicação
            docker-compose up -d
            
            # Verificar logs
            docker-compose logs --tail=100
